name: Debug ServiceNow Network Issues

on:
  workflow_dispatch:

jobs:
  debug-network:
    runs-on: ubuntu-latest
    
    steps:
    - name: System Information
      run: |
        echo "=== System Information ==="
        uname -a
        echo ""
        echo "=== curl version ==="
        curl --version
        echo ""
        echo "=== Network configuration ==="
        ip route show
        echo ""
        
    - name: DNS Resolution Test
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== DNS Resolution Test ==="
        echo "Testing DNS resolution for: $INSTANCE"
        
        # Test DNS resolution
        if nslookup "$INSTANCE"; then
          echo "✅ DNS resolution successful"
        else
          echo "❌ DNS resolution failed"
          exit 1
        fi
        
        # Get IP address
        IP=$(nslookup "$INSTANCE" | grep -A1 "Name:" | tail -n1 | awk '{print $2}')
        echo "Resolved IP: $IP"
        
    - name: Basic Connectivity Test
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== Basic Connectivity Test ==="
        
        # Test basic HTTP connectivity
        echo "Testing basic connectivity to $INSTANCE..."
        
        if nc -z -w5 "$INSTANCE" 443; then
          echo "✅ Port 443 (HTTPS) is reachable"
        else
          echo "❌ Port 443 (HTTPS) is not reachable"
          exit 1
        fi
        
        if nc -z -w5 "$INSTANCE" 80; then
          echo "✅ Port 80 (HTTP) is reachable"
        else
          echo "⚠️ Port 80 (HTTP) is not reachable (may be normal)"
        fi
        
    - name: SSL Certificate Test
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== SSL Certificate Test ==="
        
        echo "Testing SSL certificate for $INSTANCE..."
        openssl s_client -connect "$INSTANCE:443" -servername "$INSTANCE" </dev/null 2>/dev/null | openssl x509 -noout -dates
        
    - name: HTTP Response Test
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== HTTP Response Test ==="
        
        # Test basic HTTP response
        echo "Testing basic HTTP response..."
        
        RESPONSE=$(curl -v -s -w "\nHTTP_CODE:%{http_code}\nTIME_CONNECT:%{time_connect}\nTIME_TOTAL:%{time_total}" \
          --connect-timeout 30 \
          --max-time 60 \
          "https://$INSTANCE/" 2>&1)
        
        echo "Full response:"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        echo "HTTP Code: $HTTP_CODE"
        
    - name: ServiceNow Login Page Test
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== ServiceNow Login Page Test ==="
        
        echo "Testing ServiceNow login page..."
        
        RESPONSE=$(curl -v -s -w "\nHTTP_CODE:%{http_code}" \
          --connect-timeout 30 \
          --max-time 60 \
          -H "User-Agent: Mozilla/5.0 (compatible; GitHub-Actions)" \
          "https://$INSTANCE/login.do" 2>&1)
        
        echo "Login page response:"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        echo "Login page HTTP Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ ServiceNow login page accessible"
        else
          echo "❌ ServiceNow login page not accessible (HTTP $HTTP_CODE)"
        fi
        
    - name: API Endpoint Test (No Auth)
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
      run: |
        echo "=== API Endpoint Test (No Auth) ==="
        
        echo "Testing API endpoint without authentication..."
        
        RESPONSE=$(curl -v -s -w "\nHTTP_CODE:%{http_code}" \
          --connect-timeout 30 \
          --max-time 60 \
          -H "Accept: application/json" \
          -H "User-Agent: GitHub-Actions-Test" \
          "https://$INSTANCE/api/now/table/sys_user?sysparm_limit=1" 2>&1)
        
        echo "API response (no auth):"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        echo "API HTTP Code (no auth): $HTTP_CODE"
        
        # Should get 401 (unauthorized) - which means the endpoint is reachable
        if [ "$HTTP_CODE" = "401" ]; then
          echo "✅ API endpoint is reachable (401 unauthorized is expected)"
        else
          echo "⚠️ Unexpected response from API endpoint: $HTTP_CODE"
        fi
        
    - name: API Endpoint Test (With Auth)
      env:
        INSTANCE: "dev195428.service-now.com"  # Replace with your real instance
        USERNAME: "git_test"  # Replace with your real username
        PASSWORD: "%xl59+k5I@>=JUHRM[*Jl[7zx&-4,!5]#0iKg=[2?K+8@S%^Lh,eacgO^!$bzAwM-KCsTbLDtnK7L:%75OyN8fleF#hN."  # Replace with your real password
      run: |
        echo "=== API Endpoint Test (With Auth) ==="
        
        echo "Testing API endpoint with authentication..."
        
        # Create base64 auth
        AUTH_HEADER=$(echo -n "$USERNAME:$PASSWORD" | base64)
        echo "Auth header created (length: ${#AUTH_HEADER})"
        
        RESPONSE=$(curl -v -s -w "\nHTTP_CODE:%{http_code}\nTIME_CONNECT:%{time_connect}\nTIME_TOTAL:%{time_total}" \
          --connect-timeout 30 \
          --max-time 60 \
          -H "Accept: application/json" \
          -H "Authorization: Basic $AUTH_HEADER" \
          -H "User-Agent: GitHub-Actions-Test" \
          "https://$INSTANCE/api/now/table/sys_user?sysparm_limit=1" 2>&1)
        
        echo "API response (with auth):"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        TIME_CONNECT=$(echo "$RESPONSE" | grep "TIME_CONNECT:" | cut -d: -f2)
        TIME_TOTAL=$(echo "$RESPONSE" | grep "TIME_TOTAL:" | cut -d: -f2)
        
        echo "Final Results:"
        echo "HTTP Code: $HTTP_CODE"
        echo "Connect Time: $TIME_CONNECT seconds"
        echo "Total Time: $TIME_TOTAL seconds"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ SUCCESS: API authentication working!"
        elif [ "$HTTP_CODE" = "401" ]; then
          echo "❌ Authentication failed - check username/password"
        elif [ "$HTTP_CODE" = "403" ]; then
          echo "❌ Access forbidden - check user permissions"
        else
          echo "❌ Unexpected response: $HTTP_CODE"
        fi