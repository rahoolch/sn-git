name: ServiceNow sc_request Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  SERVICENOW_INSTANCE: ${{ secrets.SERVICENOW_INSTANCE }}
  SERVICENOW_USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
  SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}

jobs:
  test-servicenow:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug Secret Values (Safe Method)
      env:
        INSTANCE: ${{ secrets.SERVICENOW_INSTANCE }}
        USERNAME: ${{ secrets.SERVICENOW_USERNAME }}
        PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
      run: |
        echo "Checking if secrets are properly set..."
        
        # Check if variables are set (without revealing values)
        if [ -z "$INSTANCE" ]; then
          echo "‚ùå SERVICENOW_INSTANCE is empty or not set"
        else
          echo "‚úÖ SERVICENOW_INSTANCE is set (length: ${#INSTANCE})"
        fi
        
        if [ -z "$USERNAME" ]; then
          echo "‚ùå SERVICENOW_USERNAME is empty or not set"
        else
          echo "‚úÖ SERVICENOW_USERNAME is set (length: ${#USERNAME})"
        fi
        
        if [ -z "$PASSWORD" ]; then
          echo "‚ùå SERVICENOW_PASSWORD is empty or not set"
        else
          echo "‚úÖ SERVICENOW_PASSWORD is set (length: ${#PASSWORD})"
        fi
        
        # Show URL structure (without revealing full domain)
        echo "URL will be: https://${INSTANCE:0:5}***${INSTANCE: -4}/api/now/table/sc_request"
      
    - name: Debug Secret Values (Safe Method)
      run: |
        echo "Checking if secrets are properly set..."
        
        # Check if variables are set (without revealing values)
        if [ -z "$SERVICENOW_INSTANCE" ]; then
          echo "‚ùå SERVICENOW_INSTANCE is empty or not set"
        else
          echo "‚úÖ SERVICENOW_INSTANCE is set (length: ${#SERVICENOW_INSTANCE})"
        fi
        
        if [ -z "$SERVICENOW_USERNAME" ]; then
          echo "‚ùå SERVICENOW_USERNAME is empty or not set"
        else
          echo "‚úÖ SERVICENOW_USERNAME is set (length: ${#SERVICENOW_USERNAME})"
        fi
        
        if [ -z "$SERVICENOW_PASSWORD" ]; then
          echo "‚ùå SERVICENOW_PASSWORD is empty or not set"
        else
          echo "‚úÖ SERVICENOW_PASSWORD is set (length: ${#SERVICENOW_PASSWORD})"
        fi
        
        # Show URL structure (without revealing full domain)
        echo "URL will be: https://${SERVICENOW_INSTANCE:0:5}***${SERVICENOW_INSTANCE: -4}/api/now/table/sc_request"
        
    - name: Debug Authentication
      run: |
        echo "üîç Debugging authentication..."
        
        # Check if credentials are set
        if [ -z "$SERVICENOW_USERNAME" ] || [ -z "$SERVICENOW_PASSWORD" ]; then
          echo "‚ùå Credentials not set properly"
          exit 1
        fi
        
        echo "Username length: ${#SERVICENOW_USERNAME}"
        echo "Password length: ${#SERVICENOW_PASSWORD}"
        
        # Test authentication with detailed output
        echo "Testing authentication..."
        
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          --connect-timeout 30 \
          --max-time 60 \
          "https://${SERVICENOW_INSTANCE}/api/now/table/sc_request?sysparm_limit=1&sysparm_fields=sys_id,user_name,active" \
          -H "Accept: application/json" \
          -H "Authorization: Basic $(echo -n ${SERVICENOW_USERNAME}:${SERVICENOW_PASSWORD} | base64)" \
          2>&1)
        
        echo "Full response:"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2 | tr -d ' ')
        echo "HTTP Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Authentication successful"
        elif [ "$HTTP_CODE" = "401" ]; then
          echo "‚ùå Authentication failed - check username/password in GitHub secrets"
          echo "üí° Make sure your ServiceNow user has 'rest_service' role"
          exit 1
        elif [ "$HTTP_CODE" = "403" ]; then
          echo "‚ùå Access forbidden - user needs 'rest_service' and 'web_service_admin' roles"
          exit 1
        else
          echo "‚ùå Unexpected response: $HTTP_CODE"
          exit 1
        fi
        
    - name: Test ServiceNow Connection
      run: |
        echo "üîç Testing ServiceNow API connection..."
        
        # Wait a bit more for full startup
        echo "Waiting additional 30 seconds for full instance startup..."
        sleep 30
        
        # Test with longer timeouts for developer instances
        HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
          --connect-timeout 30 \
          --max-time 120 \
          "https://${SERVICENOW_INSTANCE}/api/now/table/sc_request?sysparm_limit=1" \
          -H "Authorization: Basic $(echo -n ${SERVICENOW_USERNAME}:${SERVICENOW_PASSWORD} | base64)")
        
        echo "HTTP Response Code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ ServiceNow connection successful"
        elif [ "$HTTP_CODE" = "401" ]; then
          echo "‚ùå Authentication failed - check username/password"
          exit 1
        elif [ "$HTTP_CODE" = "000" ]; then
          echo "‚ùå Connection failed - instance may still be starting up"
          echo "üí° Try manually waking up your instance at: https://developer.servicenow.com"
          exit 1
        else
          echo "‚ùå ServiceNow connection failed (HTTP $HTTP_CODE)"
          exit 1
        fi
        
    - name: Create Test Request
      id: create_request
      run: |
        echo "Creating test request..."
        RESPONSE=$(curl -s -X POST \
          "https://${SERVICENOW_INSTANCE}/api/now/table/sc_request" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Basic $(echo -n ${SERVICENOW_USERNAME}:${SERVICENOW_PASSWORD} | base64)" \
          -d '{
            "short_description": "GitHub Test Request - '"${{ github.repository }}"'",
            "description": "Test request from GitHub Actions\nRepository: '"${{ github.repository }}"'\nCommit: '"${{ github.sha }}"'\nBranch: '"${{ github.ref_name }}"'",
            "priority": "4",
            "state": "-5",
            "requested_for": "'"${SERVICENOW_USERNAME}"'",
            "request_state": "submitted_for_approval"
          }')
        
        REQUEST_NUMBER=$(echo $RESPONSE | jq -r '.result.number')
        REQUEST_SYS_ID=$(echo $RESPONSE | jq -r '.result.sys_id')
        
        if [ "$REQUEST_NUMBER" != "null" ]; then
          echo "‚úÖ Request created: $REQUEST_NUMBER"
          echo "request_number=$REQUEST_NUMBER" >> $GITHUB_OUTPUT
          echo "request_sys_id=$REQUEST_SYS_ID" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to create request"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
    - name: Read Request Back
      run: |
        echo "Reading request back..."
        REQUEST_SYS_ID="${{ steps.create_request.outputs.request_sys_id }}"
        
        RESPONSE=$(curl -s -X GET \
          "https://${SERVICENOW_INSTANCE}/api/now/table/sc_request/${REQUEST_SYS_ID}" \
          -H "Accept: application/json" \
          -H "Authorization: Basic $(echo -n ${SERVICENOW_USERNAME}:${SERVICENOW_PASSWORD} | base64)")
        
        REQUEST_STATE=$(echo $RESPONSE | jq -r '.result.request_state')
        APPROVAL=$(echo $RESPONSE | jq -r '.result.approval // "not_requested"')
        
        echo "‚úÖ Request read successfully"
        echo "Request Number: ${{ steps.create_request.outputs.request_number }}"
        echo "Request State: $REQUEST_STATE"
        echo "Approval Status: $APPROVAL"
        
    - name: Update Request with Test Results
      run: |
        echo "Updating request with test results..."
        REQUEST_SYS_ID="${{ steps.create_request.outputs.request_sys_id }}"
        
        WORK_NOTES="GitHub Action test completed successfully\\nTest run: ${{ github.run_id }}\\nCompleted at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        curl -s -X PUT \
          "https://${SERVICENOW_INSTANCE}/api/now/table/sc_request/${REQUEST_SYS_ID}" \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -H "Authorization: Basic $(echo -n ${SERVICENOW_USERNAME}:${SERVICENOW_PASSWORD} | base64)" \
          -d '{
            "work_notes": "'"$WORK_NOTES"'",
            "close_notes": "GitHub Action test completed successfully"
          }'
        
        echo "‚úÖ Request updated with test results"
        
    - name: Print Test Summary
      if: always()
      run: |
        echo ""
        echo "========================================"
        echo "        SERVICENOW TEST SUMMARY"
        echo "========================================"
        echo "Request Number: ${{ steps.create_request.outputs.request_number }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Test Run ID: ${{ github.run_id }}"
        echo ""
        echo "ServiceNow URL: https://${{ env.SERVICENOW_INSTANCE }}/nav_to.do?uri=sc_request.do?sys_id=${{ steps.create_request.outputs.request_sys_id }}"
        echo "========================================"